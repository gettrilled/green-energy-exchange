import React from 'react';
import { fetchEnergyMarketData } from '../../lib/energyMarketApi';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const ENERGY_INFO = {
  solar: 'Solar energy is harnessed from the sun using photovoltaic cells or solar thermal collectors. It is renewable and widely used for electricity and heating.',
  wind: 'Wind energy is generated by converting wind currents into electricity using wind turbines. It is clean, renewable, and increasingly cost-effective.',
  hydro: 'Hydropower uses the flow of water (usually from dams) to spin turbines and generate electricity. It is one of the oldest and largest sources of renewable energy.',
  biomass: 'Biomass energy comes from organic materials like plants, wood, and waste. It can be used for heating, electricity, and as biofuel.',
  geothermal: 'Geothermal energy is derived from the heat stored beneath the earth’s surface. It is used for electricity generation and direct heating applications.',
  nuclear: 'Nuclear energy is produced from nuclear reactions and is a low-carbon source of electricity. It is reliable but requires careful management of radioactive waste.',
  tidal: 'Tidal energy is generated from the movement of tides and is a renewable energy source. It is predictable but location-dependent.'
};

const ENERGY_COMPANIES = [
  'NextEra Energy (USA)',
  'Iberdrola (Spain)',
  'Orsted (Denmark)',
  'Enel (Italy)',
  'Vestas (Denmark)',
  'Siemens Gamesa (Germany/Spain)',
  'Tata Power (India)',
  'Adani Green Energy (India)',
  'Suzlon (India)',
  'Brookfield Renewable (Canada)',
  'Canadian Solar (Canada)',
  'First Solar (USA)'
];

const SAMPLE_QUESTIONS = [
  'What are the types of renewable energy?',
  'Tell me about solar energy.',
  'Who are the top energy companies?',
  'What is the current market price of energy?',
  'Which energy is the cheapest right now?',
  'Can you suggest the best energy to buy?',
  'What is wind energy?',
  'What is biomass energy?',
  'What is the cleanest energy source?',
  'How are you?'
];

function getEnergyAnswer(question: string, marketData: any) {
  const q = question.toLowerCase();
  if (/\b(hi|hello|hey|good morning|good afternoon|good evening|good night|greetings|what's up|how are you)\b/.test(q)) {
    if (q.includes('morning')) return '🌞 Good morning! How can I help you with energy info today?';
    if (q.includes('afternoon')) return '🌤️ Good afternoon! Need any energy tips or info?';
    if (q.includes('evening')) return '🌙 Good evening! Ask me anything about energy or the market.';
    if (q.includes('night')) return '🌙 Good night! If you have any energy questions, I am here.';
    if (q.includes('how are you')) return "I'm just a bot, but I'm here to help you!";
    return 'Hello! 👋 How can I assist you with energy information or suggestions?';
  }
  if (q.includes('market') || q.includes('price') || q.includes('best energy to buy')) {
    if (!marketData) return 'Fetching current market data...';
    let best = marketData.reduce((a: any, b: any) => (a.price < b.price ? a : b));
    let table = marketData.map((e: any) => `• ${e.type}  \nState: ${e.state}  \nYear: ${e.year}  \nPrice: ${e.price} ${e.unit}  \nTrend: ${e.trend}`).join('\n\n');
    return `**Current Market Prices**\n${table}\n\n**Best energy to buy (lowest price):**\n${best.type} (${best.state}, ${best.year}) at ${best.price} ${best.unit}`;
  }
  if (q.includes('suggestion') || q.includes('recommend')) {
    if (marketData && marketData.length > 0) {
      let best = marketData.reduce((a: any, b: any) => (a.price < b.price ? a : b));
      return `**Suggestion:**\nBased on current market data, we suggest:\n• ${best.type} (${best.state}, ${best.year}) at ${best.price} ${best.unit}.`;
    } else {
      return '**Suggestion:**\nWe suggest considering solar or wind energy for cost-effectiveness and sustainability. For a personalized suggestion, ask about the market or prices!';
    }
  }
  if (q.includes('copilot') || q.includes('ai assistant') || q.includes('code help')) {
    return '**GitHub Copilot**\nGitHub Copilot is an AI coding assistant that helps you write code faster and smarter.\nLearn more or get started here: https://github.com/features/copilot';
  }
  if (q.includes('company') || q.includes('companies') || q.includes('provider')) {
    return '**Major Energy Companies:**\n' + ENERGY_COMPANIES.map(c => `• ${c}`).join('\n') + '\n\nFor more, try GitHub Copilot or visit: https://github.com/features/copilot';
  }
  if (q.includes('all energies') || q.includes('energy types')) {
    return '**Energy Types:**\n' + Object.entries(ENERGY_INFO).map(([k, v]) => `• **${k.charAt(0).toUpperCase() + k.slice(1)}**: ${v}`).join('\n\n');
  }
  if (q.includes('solar')) return `**Solar Energy:**\n${ENERGY_INFO.solar}`;
  if (q.includes('wind')) return `**Wind Energy:**\n${ENERGY_INFO.wind}`;
  if (q.includes('hydro')) return `**Hydro Energy:**\n${ENERGY_INFO.hydro}`;
  if (q.includes('biomass')) return `**Biomass Energy:**\n${ENERGY_INFO.biomass}`;
  if (q.includes('geothermal')) return `**Geothermal Energy:**\n${ENERGY_INFO.geothermal}`;
  if (q.includes('nuclear')) return `**Nuclear Energy:**\n${ENERGY_INFO.nuclear}`;
  if (q.includes('tidal')) return `**Tidal Energy:**\n${ENERGY_INFO.tidal}`;
  if (q.includes('best energy')) return '**Best Energy:**\nThe best energy source depends on your needs, location, and environmental impact. Renewable sources like solar and wind are great for sustainability.';
  if (q.includes('cheapest energy')) return '**Cheapest Energy:**\nThe cheapest energy source varies by region, but wind and solar are now among the most cost-effective options globally.';
  if (q.includes('cleanest energy')) return '**Cleanest Energy:**\nSolar, wind, hydro, and tidal are considered the cleanest energy sources as they produce little or no emissions.';
  return "I'm a demo chatbot! Ask me about solar, wind, hydro, biomass, geothermal, nuclear, tidal energy, or major energy companies.";
}

function isPriceChartQuestion(q: string) {
  return /chart|graph|trend|visual|plot|show.*price|price.*graph|market.*trend|market.*chart/.test(q);
}

const ChatBot: React.FC = () => {
  const [open, setOpen] = React.useState(false);
  const [messages, setMessages] = React.useState([
    { from: 'bot', text: 'Hi! Ask me anything about solar, wind, hydro, biomass, geothermal, nuclear, or tidal energy.' }
  ]);
  const [input, setInput] = React.useState('');
  const [marketData, setMarketData] = React.useState<any>(null);
  const [showChart, setShowChart] = React.useState(false);
  const [chartData, setChartData] = React.useState<any>(null);
  const [chartOptions, setChartOptions] = React.useState<any>(null);
  const messagesEndRef = React.useRef<HTMLDivElement>(null);

  React.useEffect(() => {
    if (open && messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages, open]);

  const handleSend = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim()) return;
    const userMsg = { from: 'user', text: input };
    let botMsg;
    if (input.toLowerCase().includes('market') || input.toLowerCase().includes('price') || input.toLowerCase().includes('best energy to buy')) {
      setMessages((msgs) => [...msgs, userMsg, { from: 'bot', text: 'Fetching current market data...' }]);
      const data = await fetchEnergyMarketData();
      setMarketData(data);
      if (isPriceChartQuestion(input)) {
        setShowChart(true);
        const labels = data.map((e: any) => `${e.type} (${e.state})`);
        const prices = data.map((e: any) => e.price);
        setChartData({
          labels,
          datasets: [
            {
              label: 'Market Price (₹/kWh)',
              data: prices,
              borderColor: '#22c55e',
              backgroundColor: 'rgba(34,197,94,0.2)',
              tension: 0.3,
              fill: true,
            },
          ],
        });
        setChartOptions({
          responsive: true,
          plugins: {
            legend: { display: true },
            title: { display: true, text: 'Energy Market Prices' },
          },
          scales: {
            y: { beginAtZero: true, title: { display: true, text: '₹/kWh' } },
            x: { title: { display: true, text: 'Energy (State)' } },
          },
        });
      } else {
        setShowChart(false);
      }
      botMsg = { from: 'bot', text: getEnergyAnswer(input, data) };
      setMessages((msgs) => [...msgs.slice(0, -1), botMsg]);
    } else {
      botMsg = { from: 'bot', text: getEnergyAnswer(input, marketData) };
      setMessages((msgs) => [...msgs, userMsg, botMsg]);
    }
    setInput('');
  };

  const handleSampleClick = async (question: string) => {
    setInput('');
    const userMsg = { from: 'user', text: question };
    let botMsg;
    if (question.toLowerCase().includes('market') || question.toLowerCase().includes('price') || question.toLowerCase().includes('best energy to buy')) {
      setMessages((msgs) => [...msgs, userMsg, { from: 'bot', text: 'Fetching current market data...' }]);
      const data = await fetchEnergyMarketData();
      setMarketData(data);
      if (isPriceChartQuestion(question)) {
        setShowChart(true);
        const labels = data.map((e: any) => `${e.type} (${e.state})`);
        const prices = data.map((e: any) => e.price);
        setChartData({
          labels,
          datasets: [
            {
              label: 'Market Price (₹/kWh)',
              data: prices,
              borderColor: '#22c55e',
              backgroundColor: 'rgba(34,197,94,0.2)',
              tension: 0.3,
              fill: true,
            },
          ],
        });
        setChartOptions({
          responsive: true,
          plugins: {
            legend: { display: true },
            title: { display: true, text: 'Energy Market Prices' },
          },
          scales: {
            y: { beginAtZero: true, title: { display: true, text: '₹/kWh' } },
            x: { title: { display: true, text: 'Energy (State)' } },
          },
        });
      } else {
        setShowChart(false);
      }
      botMsg = { from: 'bot', text: getEnergyAnswer(question, data) };
      setMessages((msgs) => [...msgs.slice(0, -1), botMsg]);
    } else {
      botMsg = { from: 'bot', text: getEnergyAnswer(question, marketData) };
      setMessages((msgs) => [...msgs, userMsg, botMsg]);
    }
  };

  return (
    <>
      <button
        onClick={() => setOpen((v) => !v)}
        className="fixed bottom-6 right-6 z-50 bg-nexus-green text-white rounded-full shadow-lg w-14 h-14 flex items-center justify-center hover:bg-nexus-green/90 transition-all"
        aria-label="Open chatbot"
      >
        <svg width="28" height="28" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/></svg>
      </button>
      {open && (
        <div className="fixed bottom-24 right-6 z-50 w-80 max-w-full bg-white rounded-xl shadow-2xl border border-nexus-green/30 flex flex-col overflow-hidden animate-fade-in">
          <div className="bg-nexus-green text-white px-4 py-2 font-semibold flex items-center justify-between">
            <span>Energy ChatBot</span>
            <button onClick={() => setOpen(false)} className="ml-2 text-white hover:text-gray-200">×</button>
          </div>
          {/* Sample Questions */}
          <div className="flex flex-wrap gap-2 p-3 border-b border-gray-100 bg-gray-50">
            {SAMPLE_QUESTIONS.map((q, i) => (
              <button
                key={i}
                className="text-xs bg-nexus-green/10 text-nexus-green px-2 py-1 rounded hover:bg-nexus-green/20 transition"
                onClick={() => setInput(q)}
                type="button"
              >
                {q}
              </button>
            ))}
          </div>
          <div className="flex-1 p-3 overflow-y-auto max-h-80" style={{ minHeight: 180 }}>
            {messages.map((msg, i) => (
              <div key={i} className={`mb-2 flex ${msg.from === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`px-3 py-2 rounded-lg text-sm ${msg.from === 'user' ? 'bg-nexus-green/10 text-nexus-green' : 'bg-gray-100 text-gray-700'}`}>{msg.text}</div>
              </div>
            ))}
            <div ref={messagesEndRef} />
            {showChart && chartData && (
              <div className="my-4">
                <Line data={chartData} options={chartOptions} />
              </div>
            )}
          </div>
          <form onSubmit={handleSend} className="flex border-t border-gray-200">
            <input
              className="flex-1 px-3 py-2 text-sm focus:outline-none"
              placeholder="Ask about any energy type..."
              value={input}
              onChange={e => setInput(e.target.value)}
              autoFocus
            />
            <button type="submit" className="px-4 text-nexus-green font-bold hover:text-nexus-green/80">Send</button>
          </form>
        </div>
      )}
    </>
  );
};

export default ChatBot;
