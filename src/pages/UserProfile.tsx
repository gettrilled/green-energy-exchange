import React, { useState, useEffect, useRef } from 'react';
import Navbar from '../components/layout/Navbar';
import GlassCard from '../components/ui/GlassCard';
import Button from '../components/ui/Button';
import { toast } from "sonner";
import { useLocation } from 'react-router-dom';
import { fetchEnergyMarketData } from '../lib/energyMarketApi';
import ChatBot from '../components/ui/ChatBot';

const ENERGY_INFO = {
  solar: 'Solar energy is harnessed from the sun using photovoltaic cells or solar thermal collectors. It is renewable and widely used for electricity and heating.',
  wind: 'Wind energy is generated by converting wind currents into electricity using wind turbines. It is clean, renewable, and increasingly cost-effective.',
  hydro: 'Hydropower uses the flow of water (usually from dams) to spin turbines and generate electricity. It is one of the oldest and largest sources of renewable energy.',
  biomass: 'Biomass energy comes from organic materials like plants, wood, and waste. It can be used for heating, electricity, and as biofuel.',
  geothermal: 'Geothermal energy is derived from the heat stored beneath the earth’s surface. It is used for electricity generation and direct heating applications.',
  nuclear: 'Nuclear energy is produced from nuclear reactions and is a low-carbon source of electricity. It is reliable but requires careful management of radioactive waste.',
  tidal: 'Tidal energy is generated from the movement of tides and is a renewable energy source. It is predictable but location-dependent.'
};

const ENERGY_COMPANIES = [
  'NextEra Energy (USA)',
  'Iberdrola (Spain)',
  'Orsted (Denmark)',
  'Enel (Italy)',
  'Vestas (Denmark)',
  'Siemens Gamesa (Germany/Spain)',
  'Tata Power (India)',
  'Adani Green Energy (India)',
  'Suzlon (India)',
  'Brookfield Renewable (Canada)',
  'Canadian Solar (Canada)',
  'First Solar (USA)'
];

const SAMPLE_QUESTIONS = [
  'What are the types of renewable energy?',
  'Tell me about solar energy.',
  'Who are the top energy companies?',
  'What is the current market price of energy?',
  'Which energy is the cheapest right now?',
  'Can you suggest the best energy to buy?',
  'What is wind energy?',
  'What is biomass energy?',
  'What is the cleanest energy source?',
  'How are you?'
];

function getEnergyAnswer(question, marketData) {
  const q = question.toLowerCase();
  // Basic greetings and small talk
  if (/\b(hi|hello|hey|good morning|good afternoon|good evening|good night|greetings|what's up|how are you)\b/.test(q)) {
    if (q.includes('morning')) return '🌞 Good morning! How can I help you with energy info today?';
    if (q.includes('afternoon')) return '🌤️ Good afternoon! Need any energy tips or info?';
    if (q.includes('evening')) return '🌙 Good evening! Ask me anything about energy or the market.';
    if (q.includes('night')) return '🌙 Good night! If you have any energy questions, I am here.';
    if (q.includes('how are you')) return "I'm just a bot, but I'm here to help you!";
    return 'Hello! 👋 How can I assist you with energy information or suggestions?';
  }
  if (q.includes('market') || q.includes('price') || q.includes('best energy to buy')) {
    if (!marketData) return 'Fetching current market data...';
    let best = marketData.reduce((a, b) => (a.price < b.price ? a : b));
    let table = marketData.map(e => `• ${e.type}  
  State: ${e.state}  
  Year: ${e.year}  
  Price: ${e.price} ${e.unit}  
  Trend: ${e.trend}`).join('\n\n');
    return `**Current Market Prices**\n${table}\n\n**Best energy to buy (lowest price):**\n${best.type} (${best.state}, ${best.year}) at ${best.price} ${best.unit}`;
  }
  if (q.includes('suggestion') || q.includes('recommend')) {
    if (marketData && marketData.length > 0) {
      let best = marketData.reduce((a, b) => (a.price < b.price ? a : b));
      return `**Suggestion:**\nBased on current market data, we suggest:\n• ${best.type} (${best.state}, ${best.year}) at ${best.price} ${best.unit}.`;
    } else {
      return '**Suggestion:**\nWe suggest considering solar or wind energy for cost-effectiveness and sustainability. For a personalized suggestion, ask about the market or prices!';
    }
  }
  if (q.includes('copilot') || q.includes('ai assistant') || q.includes('code help')) {
    return '**GitHub Copilot**\nGitHub Copilot is an AI coding assistant that helps you write code faster and smarter.\nLearn more or get started here: https://github.com/features/copilot';
  }
  if (q.includes('company') || q.includes('companies') || q.includes('provider')) {
    return '**Major Energy Companies:**\n' + ENERGY_COMPANIES.map(c => `• ${c}`).join('\n') + '\n\nFor more, try GitHub Copilot or visit: https://github.com/features/copilot';
  }
  if (q.includes('all energies') || q.includes('energy types')) {
    return '**Energy Types:**\n' + Object.entries(ENERGY_INFO).map(([k, v]) => `• **${k.charAt(0).toUpperCase() + k.slice(1)}**: ${v}`).join('\n\n');
  }
  if (q.includes('solar')) return `**Solar Energy:**\n${ENERGY_INFO.solar}`;
  if (q.includes('wind')) return `**Wind Energy:**\n${ENERGY_INFO.wind}`;
  if (q.includes('hydro')) return `**Hydro Energy:**\n${ENERGY_INFO.hydro}`;
  if (q.includes('biomass')) return `**Biomass Energy:**\n${ENERGY_INFO.biomass}`;
  if (q.includes('geothermal')) return `**Geothermal Energy:**\n${ENERGY_INFO.geothermal}`;
  if (q.includes('nuclear')) return `**Nuclear Energy:**\n${ENERGY_INFO.nuclear}`;
  if (q.includes('tidal')) return `**Tidal Energy:**\n${ENERGY_INFO.tidal}`;
  if (q.includes('best energy')) return '**Best Energy:**\nThe best energy source depends on your needs, location, and environmental impact. Renewable sources like solar and wind are great for sustainability.';
  if (q.includes('cheapest energy')) return '**Cheapest Energy:**\nThe cheapest energy source varies by region, but wind and solar are now among the most cost-effective options globally.';
  if (q.includes('cleanest energy')) return '**Cleanest Energy:**\nSolar, wind, hydro, and tidal are considered the cleanest energy sources as they produce little or no emissions.';
  return "I'm a demo chatbot! Ask me about solar, wind, hydro, biomass, geothermal, nuclear, tidal energy, or major energy companies.";
}

const UserProfile = () => {
  const location = useLocation();
  const userDataFromAuth = location.state?.userData || {};
  
  const [userData, setUserData] = useState({
    name: userDataFromAuth.name || '',
    email: userDataFromAuth.email || '',
    location: userDataFromAuth.location || '',
    userType: userDataFromAuth.userType || 'consumer',
    joinedDate: userDataFromAuth.joinedDate || new Date().toLocaleDateString('en-US', { month: 'long', year: 'numeric' }),
    profileImage: userDataFromAuth.profileImage || null,
  });

  const fileInputRef = React.useRef<HTMLInputElement>(null);

  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setUserData(prev => ({ ...prev, profileImage: reader.result as string }));
        toast.success("Profile photo updated!");
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSaveChanges = () => {
    setUserData({
      ...userData,
    });
    toast.success("Profile updated successfully!");
  };

  useEffect(() => {
    if (location.state?.userData) {
      setUserData(prevData => ({
        ...prevData,
        ...location.state.userData,
      }));
    }
  }, [location.state?.userData]);

  return (
    <div className="min-h-screen bg-nexus-gray-light">
      <Navbar />
      
      <div className="pt-24 pb-16">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8">
          <div className="mb-8">
            <h1 className="text-2xl sm:text-3xl font-bold mb-2">
              My Profile
            </h1>
            <p className="text-gray-600">
              Manage your account settings and preferences
            </p>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-1">
              <GlassCard className="p-6">
                <div className="flex flex-col items-center">
                  <div className="w-32 h-32 bg-nexus-green/10 rounded-full flex items-center justify-center mb-4">
                    {userData.profileImage ? (
                      <img 
                        src={userData.profileImage} 
                        alt={userData.name} 
                        className="w-32 h-32 rounded-full object-cover"
                      />
                    ) : (
                      <span className="text-4xl font-bold text-nexus-green">
                        {userData.name ? userData.name.charAt(0) : '?'}
                      </span>
                    )}
                  </div>
                  
                  <h2 className="text-xl font-bold mb-1">{userData.name || 'User Name'}</h2>
                  <p className="text-gray-600 mb-2">{userData.email || 'email@example.com'}</p>
                  
                  <div className="inline-block px-3 py-1 text-xs font-medium bg-nexus-green/10 text-nexus-green rounded-full mb-4">
                    {userData.userType === 'producer' ? 'Energy Producer' : 'Energy Consumer'}
                  </div>
                  
                  <p className="text-sm text-gray-500 mb-6">
                    Member since {userData.joinedDate}
                  </p>
                  
                  <input
                    type="file"
                    accept="image/*"
                    ref={fileInputRef}
                    style={{ display: 'none' }}
                    onChange={handlePhotoUpload}
                  />
                  <Button variant="outline" fullWidth onClick={() => fileInputRef.current?.click()}>
                    Upload Photo
                  </Button>
                </div>
                
                <div className="mt-8 pt-6 border-t border-gray-100">
                  <h3 className="font-medium mb-4">Account Navigation</h3>
                  
                  <nav className="space-y-1">
                    <a href="#personal-info" className="flex items-center px-3 py-2 text-sm rounded-md bg-nexus-green/10 text-nexus-green font-medium">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                        <circle cx="12" cy="7" r="4"></circle>
                      </svg>
                      Personal Information
                    </a>
                    
                    <a href="#" className="flex items-center px-3 py-2 text-sm rounded-md text-gray-700 hover:bg-nexus-green/5 hover:text-nexus-green">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                        <polyline points="22 4 12 14.01 9 11.01"></polyline>
                      </svg>
                      Energy Preferences
                    </a>
                    
                    <a href="#" className="flex items-center px-3 py-2 text-sm rounded-md text-gray-700 hover:bg-nexus-green/5 hover:text-nexus-green">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                        <line x1="16" y1="2" x2="16" y2="6"></line>
                        <line x1="8" y1="2" x2="8" y2="6"></line>
                        <line x1="3" y1="10" x2="21" y2="10"></line>
                      </svg>
                      Transaction History
                    </a>
                    
                    <a href="#" className="flex items-center px-3 py-2 text-sm rounded-md text-gray-700 hover:bg-nexus-green/5 hover:text-nexus-green">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
                        <circle cx="12" cy="7" r="4"></circle>
                      </svg>
                      Connected Devices
                    </a>
                    
                    <a href="#" className="flex items-center px-3 py-2 text-sm rounded-md text-gray-700 hover:bg-nexus-green/5 hover:text-nexus-green">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                      </svg>
                      Security Settings
                    </a>
                  </nav>
                </div>
              </GlassCard>
            </div>
            
            <div className="lg:col-span-2">
              <GlassCard className="p-6" id="personal-info">
                <h3 className="text-lg font-medium text-gray-700 mb-6">Personal Information</h3>
                
                <form onSubmit={(e) => { e.preventDefault(); handleSaveChanges(); }}>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 mb-6">
                    <div>
                      <label htmlFor="fullName" className="block text-sm font-medium text-gray-700 mb-1">
                        Full Name
                      </label>
                      <input
                        id="fullName"
                        type="text"
                        className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-nexus-green/50"
                        defaultValue={userData.name}
                        onChange={(e) => setUserData({...userData, name: e.target.value})}
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
                        Email Address
                      </label>
                      <input
                        id="email"
                        type="email"
                        className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-nexus-green/50"
                        defaultValue={userData.email}
                        onChange={(e) => setUserData({...userData, email: e.target.value})}
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">
                        Phone Number
                      </label>
                      <input
                        id="phone"
                        type="tel"
                        className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-nexus-green/50"
                        placeholder="+91 98765 43210"
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="location" className="block text-sm font-medium text-gray-700 mb-1">
                        Location
                      </label>
                      <input
                        id="location"
                        type="text"
                        className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-nexus-green/50"
                        defaultValue={userData.location}
                        onChange={(e) => setUserData({...userData, location: e.target.value})}
                      />
                    </div>
                  </div>
                  
                  <div className="mb-6">
                    <label htmlFor="bio" className="block text-sm font-medium text-gray-700 mb-1">
                      Bio
                    </label>
                    <textarea
                      id="bio"
                      rows={4}
                      className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-nexus-green/50"
                      placeholder="Tell us a bit about yourself..."
                    ></textarea>
                  </div>
                  
                  <div className="flex justify-end">
                    <Button type="submit">
                      Save Changes
                    </Button>
                  </div>
                </form>
              </GlassCard>
              
              {userData.userType === 'producer' && (
                <GlassCard className="p-6 mt-6">
                  <h3 className="text-lg font-medium text-gray-700 mb-6">Producer Settings</h3>
                  
                  <div className="space-y-6">
                    <div>
                      <label htmlFor="energyType" className="block text-sm font-medium text-gray-700 mb-1">
                        Primary Energy Type
                      </label>
                      <select
                        id="energyType"
                        className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-nexus-green/50"
                        defaultValue="solar"
                      >
                        <option value="solar">Solar</option>
                        <option value="wind">Wind</option>
                        <option value="hydro">Hydro</option>
                        <option value="biomass">Biomass</option>
                        <option value="geothermal">Geothermal</option>
                      </select>
                    </div>
                    
                    <div>
                      <label htmlFor="capacity" className="block text-sm font-medium text-gray-700 mb-1">
                        Production Capacity (kWh)
                      </label>
                      <input
                        id="capacity"
                        type="number"
                        className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-nexus-green/50"
                        placeholder="500"
                      />
                    </div>
                    
                    <div>
                      <label htmlFor="defaultRate" className="block text-sm font-medium text-gray-700 mb-1">
                        Default Rate (₹/kWh)
                      </label>
                      <input
                        id="defaultRate"
                        type="number"
                        step="0.01"
                        className="w-full px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-nexus-green/50"
                        placeholder="5.20"
                      />
                    </div>
                    
                    <div className="flex justify-end">
                      <Button onClick={() => toast.success("Producer settings updated!")}>
                        Update Settings
                      </Button>
                    </div>
                  </div>
                </GlassCard>
              )}
            </div>
          </div>
        </div>
      </div>
      <ChatBot />
    </div>
  );
};

export default UserProfile;
